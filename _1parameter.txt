! "nrow" = the size of ROW_WORLD, "4*noamoeba" = the size of AMOEBA_WORLD, and "ndim+1" = the size of CONTRACT_WORLD.
rhoy             0.715  
vary             0.52  
rhoyh            0.677 
varyh            0.37  
deltak           0.109 
deltah           0.017 
rd               0.035 
alpha            0.247 ! Following Naka, housing capital is removed from the defintiion for capital income (p.15).0.326 is the conventinal perfect version with a single type of capital.
lambda           0.2  
theta            0.1359087 ! 0.2, 0.14 Yang, <----------------------------------------------------------- (7)
sigma            1.5 ! 1.5 Yang. 2.0 ! the larger the sigma, the flatter the curve becomes when the abscissa is away from the origin.  
nu               0.88 
kv1              0.0766807 ! 0.05 ! the smaller the more largest scale project. <------------------------- (1)
prtk0            0.0400111 ! <-------------------------------------------------------------------------- (2-4)
prtk1            0.1155747
prtk2            0.1164856
phi0             0.5 ! needed for programming issue. can take any value. 
phi1             0.7701660 ! <-------------------------- (8-10)
phi2             0.9351416 
phi3             0.9674434 
beta             0.9416076 ! 0.93 might be too low. <---------------------------------------------------- (6)
zbar             1.2379053  ! 1.2 this parameter is key to the portion of large scale investment project<-- It seems the lower the better. <------------- (5)
zlow             0.0 ! hard wired. Don't change it. 
hmin             0 
hmax             16 ! 25; 120.0
amin             -0.5  
amax             300 ! 300 ! 70 ! 500 ! 700 ! 999.0 If scale 3 enteprise disappear then raise up the upper bound of financial assets.
dfrac            0.27 ! See Cagetti and De Nardi 2009, TaucfinalSS.f90, lines 56, and 1273. the ratio of government debt to total capital
gfrac            0.187 ! government spending. average ratio of "government purchases to GDP" over the 1990-1999 period. Cagetti and De Nardi 2009 pdf. 11.
taubal           0.033
CorpLabFrac      0.5  
CorpOutFrac      0.5  
btaxw            0.32 
ptaxw            0.7646
staxw            0.2154
btaxe            0.2562
ptaxe            1.4   
staxe            0.42  
tauss            0.074 
PropHouseCapital 0.5   
BossPropPopu     0.12  
rl               0.09  
penalty          -1.e6 
epsilon          1.e-3 ! used for housing utility
err_dist         1.e-12
gamma1           0.0505
mu1              0.07  
mu2              0.07  
rho1             0.070 ! sell current one.
rho2             0.025 ! buy new one.	
nmc              3 
hdim             15 ! 15 ! <------------ 
adim             15 ! 15 ! <------------ 15 has the same performance as 30 (because brent_localizer has only 5 grid points.)
fnadim           15 ! hardwired automatically equal to adim.
kdim             4 
length           5 
radjust          0.08  
rweight          0.50  
epsirmin         5.e-05 ! 5.e-08
iterarmax        40 ! 40 <----------------   
rbar             0.035
tbalwidth        0.3     
epsigovmin       5.e-05 ! 5.e-12 
iteragovmax      40 ! 40 <---------------- 
taubalmin        0.07 ! 0.0345 Since our taubal seraching starts with the taubalmin, if we set this initial guess too low and we get a positive bal2gdp in the first round, then the program will go in the wrong direction by searching only the area smaller than the initial "too small" lower bound.
taubalmax        0.08 ! 0.0363
pertgov          0.04 ! good.
b2gratio         0.02 ! bequest to gdp
btax             0.258
ptax			 0.768
stax             0.031
nmul             2
ndim			 10
tauk  			 0.4 ! interest income tax rate
fnhdim			 15 ! hardwired automatically equal to "hdim."
sdim			 5 ! Use Odd number only!!! 5 good. It is the size of financial grid points after the 1st round.
err_svdist 	     1.e-10 ! 
iterasvmax		 5 ! five has the same performance as 10 and 20.	
nsdim	         20 ! good 20. It is the first round's financial grid point number. Had better larger than "hdim."
gsdim			 1.0 ! good 1.0 (housing-asset-grid-generating parameter)
trsld			 -5.e8
iterainvdist	 40 ! 40
tausv			 0.15   ! rate of tax on interest income
taubp			 0.25   ! rate of tax on corporate profit
target1			 0.65   ! target 1: fraction of capital in the corporate sector ! ##############################################################
target2   		 0.60   ! target 2: distribution of entrepreneurs on smallest projects
target3          0.30   ! target 3: distribution of entrepreneurs on median projects
target4          0.10   ! target 4: distribution of entrepreneurs on largest projects
target5          0.12   ! target 5: fraction of entrepreneurs in the population
target6			 1.97   ! target 6: non-housing capital (physical capital) to output
target7  	     1.26   ! target 7: housing capital (consumer durables) to output
target8          0.40   ! target 8: total asset held by entrepreneurs
target9          0.27   ! target 9: share of income held by entrepreneurs
target10         8.0    ! target 10: ratio of median assets (entrepreneurs to workers)
lower1           0.01   ! kv1: size of the smallest project ! ##################################################################################
upper1           1.50   ! kv1: size of the smallest project
lower2           0.01   ! prtk0: probability of new ideas
upper2           1.00   ! prtk0: probability of new ideas
lower3           0.01   ! prtk1: probability of new ideas
upper3           1.00   ! prtk1: probability of new ideas
lower4           0.01   ! prtk2: probability of new ideas
upper4           1.00   ! prtk2: probability of new ideas
lower5           0.01   ! zbar: average tech shock  
upper5           1.50   ! zbar: average tech shock
lower6           0.50   ! beta: discount factor (on "annual" basis)
upper6           1.50   ! beta: discount factor (on "annual" basis)
lower7           0.05   ! theta: housing utility parameter
upper7           0.30   ! theta: housing utility parameter
lower8           0.50   ! phi1: tech shock
upper8           1.00   ! phi1: tech shock
lower9           0.20   ! phi2: tech shock
upper9           1.00   ! phi2: tech shock
lower10          0.20   ! phi3: tech shock
upper10          1.00   ! phi3: tech shock
trylen          10000   ! (integer) Length of trials for exploratory mode (1); sblno1+trylen must be smaller than nsbq. ! ############################################################
sblno1              1   ! (integer) The index of the first sobol trial in the sobol matrix; only used in mpi_exercise_mode == 1.
nrow         	   20   ! !!!(integer) "nrow has to be larger than or equal to (ndim+1) and 4*noamoeba," and "-np has to be nrow+1." The number of nodes involved in an individual amoeba group, including its amoeba head, the sub-amoeba groups, each of which contains 4 nodes. There are two possible scenario. One: ndim (size of target moments) plus one (the amoeba head) is smaller than total vertices in a single amoeba (i.e., 4 times noamoeba (the size of amoeba)). Two: it goes the other way around, ndim+1>=4*noamoeba. Both cases are acceptable to the program. 7-30-2017. 
stepsize     	  100   ! (real) 10, step size of amoeba in a single dimension; (%) percent of the domain in an individual dimension 
reinifac     	  0.5   ! (real) reinitialization factor determining the weights of centroid when re-initializing a bad node.
amoalp       	  1.0   ! (real)   
amogam       	  1.0   ! (real) 
amobet       	  0.5   ! (real) 
amotau       	  0.5   ! (real) contraction factor.
amoerrcrt    	1.E-3   ! (real) 1.E-4 
amoitrcrt    	 1500   ! (integer) amoeba maximum interation. 500-1500.
amoconvex    	  0.2   ! (real) Weight on the best single point (redundant) 
amoiniswitch 	    0   ! (integer) 0, no convex combination; 1, convex combination with one best parameter inputs.
nsbq 		    20000   ! total number of raw sobol sequence's rows; nsbq must be larger than sblno1+trylen.
slist               1   ! the start index of the list of starting points. Note: For mpi_exercise_mode == 2, (elist-slist+1) has to be larger than the number of amoeba (nslaves), so that the initialization stage would issue error message. 
elist               1   ! the end index of the list of starting points. Note: For mpi_exercise_mode == 2, (elist-slist+1) has to be larger than the number of amoeba (nslaves), so that the initialization stage would issue error message.
noamoeba            5   ! !##! noamoeba*4 must be smaller than or equal to "nrow," and "-np has to be nrow+1." The total number of vertices required in an individual amoeba group. Note: noamoeba is actually the number of subgroup within an amoeba.
maxdist			1.e-6   ! 1.e-4; maximum distance allowed among vertices in a single amoeba
tinymass		1e-12   ! the lower threshold of a valid mass grid. | for adjustment of extremem cases in population distribution.
chunkmass        1e-2   ! the upper threshold of a valid mass grid. | for adjustment of extremem cases in population distribution.
initau				4   ! multiplier of initial vertices ! for determining how spread the shape of the first vertex would be.
testfunc_idx        4   ! 1, norm 2 measure; 2, Variably Dimensioned Function; 3, ; 4, Extended Rosenbrock Function (restart required to precisely approximate the answer). 
printout1		 false  ! Subroutine 'print_basic_model_vectors' #################################################################################
printout2		 false  ! WF and CWF (value function @ beginning & end of period); used for building stage ! Successful development version: True in 1, 3, 5, 6, and 7.	
printout3        true   ! !##!TRUE IN PRODUCTIVE MODE. Unit: my_id+1001. SingleNodeMPI.txt or feedback_XXXX.txt convergence info. Intermediate results. 
printout4        false  ! !##!OFF IN PRODUCTIVE MODE. printout_for_stata_lifecycle_plotting() [121]
printout5        false  ! debug with process mark for convergence [104]
printout6        false  ! !##!OFF IN PRODUCTIVE MODE. Show the computing time in solving all the bellman equations for each round and mass transition. 
printout7		 false  ! !##!OFF IN PRODUCTION MODE. Print cww, cwf, cwa, cwh, cwk ... [115-119, 123-124]. 
printout8        false  ! !##!ONLY USED IN SINGLE NODE DEBUG MODE. trace of mass transition across generations [128] 
printout9        false  ! end-of-period distribution of 1) mass [129] & 2) nonlinear tax [130].
printout10       true   ! !##!TRUE IN PRODUCTIVE MODE. Unit: my_id+2001. Final aggregate stat results. 
printout11       true   ! !##!True, 'solve_model'; False, 'test_model', 7-8-2017
printout12       true   ! Show the default parameter setting
printout13	     true   ! amoeba intermediate message
printout14       false  ! true, set the degree of each deviation as four times the maximum coordinate; false, the usual method I have been using, based on constraints
printout15       false  ! Used in building stage. True, allow undefined area to create extreme penalty of value infinity; 
printout16       false  ! true, read existing optimal points WITHOUT sobel sequence (see parameter bestvertex_file); FALSE, read the coarse list (_full_list_startingpoint.csv). Note: only one amoeba is needed. Don't make redundant setting in command line.
listnumber       _startingpoint_1.csv ! [Redundant] specify which starting point to read.       
bestvertex_file  1_001_restart_list.txt
mpi_exercise_mode   2   ! (integer) Single node mode, 0; Stage 1, Exploratory mode, 1; Steage 2, Amoeba algoritm implementation mode 2 (listnumber, this parameter is reduendant now) 
!
!
!
!
! tausvflag		 true   ! it controls whther the interest income tax is levied or not.
!
! ----------------------------------------------------------------------------------------------------------------------------------------------------- 
! (Test) Setting #1. 
!   Purpose: Customary experiment mode. Check if subroutine read_best_point works. 
!   MPI_exercise_mode: -2 
!   Bestvertex_file: xxxx.
! 
! ----------------------------------------------------------------------------------------------------------------------------------------------------- 
! (Test) Setting #2. 
!   Purpose: MKL random number generator experiment.
!	MPI_exercise_mode: -1 
!
! ----------------------------------------------------------------------------------------------------------------------------------------------------- 
! (Verification) Setting #3. size of nodes: One 
!	Purpose: Compute the steady-state of the model with a SINGLE node using the parameters (of size ndim) 
!		specified in _1parameter.txt. No amoeba algorithm, no convergence involved.  	  
!   MPI_exercise_mode: 0 
!   Output: _SingleNodeInputs.txt (1001), and _SingleNodeDetails.txt (2001)
!  
! ----------------------------------------------------------------------------------------------------------------------------------------------------- 
! (Production) Setting #4. size of nodes: customary (MPI implementation, no amoeba algorithm) 
!   Purpose: system root collects a promising starting points from slave nodes via MPI. Slave nodes work 
!		on a list generated by Sobel sequence in the convex-combination style.
!	Method: one starting point per node. There is no upper bound of nodes evoked in the implementation.
!   MPI_exercise_mode: 1 
!	Output1 (non-root): SlaveIntermFeedback_xxx.txt (1001, detailed information on the fly), 
!						SlaveMacrostat_xxx.txt (2001, blank)
!   Output2 (root): RootIntermCollect_xxx.txt (1001, similar to IOMat_xxx.txt with MPI ranking info), 
!					RootUseless_xxx.txt (2001, blank)
!   Output3: IOMat_xxx.txt (input, moment, penalty)
!   Output4: FinalScaledSobel_xxx.txt (list of Sobol sequence starting with corresponding center to a set of given upper and lower bounds)
!   nsbq: the length of the trial sobel sequence list 
!   trylen: ...
!   sblno1: ...
!   weight list: 8-19-2017 useless now.
!   breaks list: 8-19-2017 useless now.
!
! ----------------------------------------------------------------------------------------------------------------------------------------------------- 
! (Test) Setting #5. Used in Program Building stage, Amoeba algorithm with exactly One amoeba     
!	Purpose: show the implementation of amoeba algorithm works successfully.
!   Calculation of required nodes: To solve 10 unknown inputs, for example, if we ask for only two amoeba subgroups, then the required 
!		total nodes would be (1+ndim+1) = 12 in command line for flag -np. And set the parameter nrow to be 11 
!		correspondingly.
! 	Formula of required nodes: (one root)+[size of nodes per amoeba group]*[number of amoebas], where 
! 		[size of nodes per amoeba group] = [amoeba root] + {4*[number of worst vertices to be improved]} + 
! 		[probably some additional vertices if the proceeding {} term is smaller than "ndim"].
!	MPI_exercise_mode: 2
!	Output1 (amoeba head): _001_amoeba_head.txt, and _001_restart_list.txt
!	Output2 (amoeba members in contract world): _contract_member.txt
! 	Output3 (amoeba members not in contract world): _Non-contract-member.txt
!	printout11: False. Solve the test functions widely used in the field of operation research
!   printout14: either Flase or True. (Now I prefer to use False because I have an academic guess on the ranges of input)
!   If printout14 is False, the range of each input has to be specified.
!	printout16: True. Read a single potential best vertex (No Sobel restart) from a file specified by parameter Bestvertex_file (below). In this case,
!   	slist and elist are irrelevant.
!   ! If printout16 is set at False, slist, elist, and file _full_list_startingpoint.csv have to be provided.
!   ! slist: customary.  
!   ! elist: customary and bigger than slist. Note that (elist-slist+1) has to be larger than the number of 
!	! 	amaoeba group we ask for (that is, ncol, a endogenous variable we cannot directly modify).
!   bestvertex_file: xxx.
!   testfunc_idx: 1~4. 
!   nrow: xxx. (see the example in setting #6 below. Important!!).
!
! ------------------------------------------------------------------------------------------------------------------------------------------------------
! (Production) Setting #6. Used in Production stage, Amoeba algorithm with exactly ONE amoeba 
!   Purpose: amoeba algorithm for approximiating the optimal parameter setting of the quantitative model.
! 	MPI_exercise_mode: 2
!	Output1 (amoeba head): _001_amoeba_head.txt, and _001_restart_list.txt
!	Output2 (amoeba members in contract world): _contract_member.txt
! 	Output3 (amoeba members not in contract world): _Non-contract-member.txt
!   printout11: True. Solve the steady state solution of the quantitative model.
!   printout14: False. Try to cover as large the parameter space as possible.
!	printout16: Has to be False, if it is the first manual adjustment of MPI_exercise_mode=2. That is, intput is read from _full_list_startingpoint.csv.
!       where _full_list_startingpoint.csv is a file renamed from file _ShortListStartPoint.csv generated by the Python program 
!       sorting_on_funcval_single3_BetterStage1.py
!       Otherwise, True. Read a single potential best vertex (No Sobel restart) from a file specified by parameter Bestvertex_file.  
!		slist, elist should be provided, which is not the case in setting #6.
!   bestvertex_file: xxx, if printout16 set to be True. Otherwise, _full_list_startingpoint.csv need to be provided.
!   	Note if you just finish MPI_exercise_mode=1 and planning to start MPI_exercise_mode=2, you need to create a 1_001_restart_list.txt based on
!		the sorted output of MPI_exercise_mode=1, which stores the list of potential starting points (that is, RootIntermCollect_xx_xx.txt).
!   nrow: xxx. The number of nodes contained in a amoeba group. The size of unknown parameters is 10, 
!		for example. Suppose we ask for two subgroup within each ameoba to perform algorithm. Since [one amoeba head] + 
!		4 times 2 = 9 < (10+1), so we set the basic ameoba required number of node to 11 for "nrow" . 
! 		On the other hand, if we ask for four amoeba subgroup for this 10 unknown parameter 
!		question (the same question), we would set 4 times 4 plus 1 = 17 (just use 17 
!		becuase it exceeds the minimum number of required amoeba nodes, 11). The command line -np would be 12 and 18, 
!		respectively.
!       In short, nrow = <number of amoebas>*max(dimension+1,<number of sub-amoeba-groups>*4).
!                 -np (the option in command line) <nrow + 1>.
!
! ----------------------------------------------------------------------------------------------------------------------------------------------------- 
! How to conduct a "test" experiment to see the performance of amoeba algorithm?
!
! Step 1. Pick one test function and a (or a list) of starting points. In this example, I demonstrate two methods to 
!	read a starting point. The first method is to read an existing short list as in setting #5, BUT 
!   (0) First, check to see if a .txt file, named _full_list_startingpoint.csv, exists and starting points available;
!       And if you want to have a refreshed output file, then delet the file with named hard-wiredly specified by x_001_restart_list.txt.
!   (1) Set printout16 to FALSE (important) so that the program is asked to read a list of starting points from _full_list_startingpoint.csv;
!   (2) Therefore, we ignore parameter bestvertex_file;
!   (3) Set slist=1 and elist=1 for simplicity because we have only one trial starting point. 
!   (4) Choose a test function which you prefer (i.e., set testfunc_idx). 
!   (5) Set printout11 to false. And change nrow to satisfy the rule of required nodes being (ndim+1).
!   (6) Ignore the value of bestvertex_file, because we already set printout16 to false. 
!   	Although these starting points were originally generaed for the quantitative 
!   	model and essentially irrelevant to any of our test functions, we adopt this list of starting points for 
!   	illustrational convenience here. 
!   (7) The rest of parameters can just be the same as specified in setting #5. 
!   (8) Command line: mpiexec -np 12 MPI_sandbox.exe.
!	(9) If you don't want to use the list of starting points _full_list_startingpoint.csv, then skip items (0) and (1) and set 
!       printout16 to true and set parameter bestvertex_file to the target file that have a valid starting point.
!
! Step 2. Tell the program to reuse the last best point from file 1_001_restart_list_txt by 
!   (1) setting printout16 to TRUE; printout14 either [True] or [False and "stepsize" should be 100] (try to cover as much parameter space as possible).
!	(2) and set bestvertex_file correspondingly as in setting#6 (say, 1_001_restart_list.txt);
!   (3) but remember to change printout11 to "false" because we are in the test stage rather than production stage.